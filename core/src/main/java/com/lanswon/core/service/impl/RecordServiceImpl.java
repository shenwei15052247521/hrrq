package com.lanswon.core.service.impl;import cn.afterturn.easypoi.entity.vo.MapExcelConstants;import cn.afterturn.easypoi.excel.ExcelExportUtil;import cn.afterturn.easypoi.excel.entity.ExportParams;import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;import cn.afterturn.easypoi.excel.entity.params.ExcelExportEntity;import com.lanswon.core.Constants;import com.lanswon.core.bean.dto.QueryRecordDTO;import com.lanswon.core.bean.dto.ResultDTO;import com.lanswon.core.bean.vo.RecordEntityVo;import com.lanswon.core.bean.vo.StatementCountVO;import com.lanswon.core.bean.vo.StatementVO;import com.lanswon.core.enums.RecordEntityTempleEnum;import com.lanswon.core.enums.ResultEnum;import com.lanswon.core.mapper.RecordMapper;import com.lanswon.core.service.RecordService;import com.lanswon.core.util.ReflectionUtil;import com.lanswon.web.dto.DTO;import lombok.extern.slf4j.Slf4j;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.ui.ModelMap;import javax.annotation.Resource;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URLEncoder;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;/** * 记录Service实现类 * @author Jaswine */@Service@Slf4jpublic class RecordServiceImpl implements RecordService {	@Resource	private RecordMapper recordMapper;	/**	 * 文件保存路径	 */	@Value("${localPath}")	private String localPath;	@Override	public DTO getAllPayRecordInfo(QueryRecordDTO queryRecordDTO) {		ResultDTO dto = new ResultDTO();		List<StatementVO> statementVOList = recordMapper.getAllPayRecordInfo(queryRecordDTO);		if (statementVOList.isEmpty()){			dto.setStatus(ResultEnum.EMPTY_RESULT.getCode());			dto.setMsg(ResultEnum.EMPTY_RESULT.getMsg());			log.error(ResultEnum.EMPTY_RESULT.toString());			return dto;		}		dto.setStatus(ResultEnum.SUCCESS.getCode());		dto.setMsg(ResultEnum.SUCCESS.getMsg());		dto.setData(statementVOList);		/* 统计结果 */		dto.setCount(recordMapper.getRecordCount(queryRecordDTO));		log.info(ResultEnum.SUCCESS.toString());		return dto;	}	@Override	public DTO getAllLoadRecordInfo(QueryRecordDTO queryRecordDTO) {		ResultDTO dto = new ResultDTO();		List<StatementVO> statementVOList = recordMapper.getAllLoadRecordInfo(queryRecordDTO);		if (statementVOList.isEmpty()){			dto.setStatus(ResultEnum.EMPTY_RESULT.getCode());			dto.setMsg(ResultEnum.EMPTY_RESULT.getMsg());			log.error(ResultEnum.EMPTY_RESULT.toString());			return dto;		}		dto.setStatus(ResultEnum.SUCCESS.getCode());		dto.setMsg(ResultEnum.SUCCESS.getMsg());		dto.setData(statementVOList);		dto.setCount(recordMapper.getRecordCount(queryRecordDTO));		return dto;	}	@Override	public DTO getAllRefundRecordInfo(QueryRecordDTO queryRecordDTO) {		ResultDTO dto = new ResultDTO();		List<StatementVO> recordInfo = recordMapper.getAllRefundRecordInfo(queryRecordDTO);		if (recordInfo.isEmpty()){			dto.setStatus(ResultEnum.EMPTY_RESULT.getCode());			dto.setMsg(ResultEnum.EMPTY_RESULT.getMsg());			log.error(ResultEnum.EMPTY_RESULT.toString());			return dto;		}		dto.setStatus(ResultEnum.SUCCESS.getCode());		dto.setMsg(ResultEnum.SUCCESS.getMsg());		dto.setData(recordInfo);		dto.setCount(recordMapper.getRecordCount(queryRecordDTO));		return dto;	}	@Override	public DTO getAllRecordInfo(QueryRecordDTO queryRecordDTO) {		ResultDTO dto = new ResultDTO();		List<StatementVO> statementVOList = recordMapper.getAllRecordInfo(queryRecordDTO);		if (statementVOList.isEmpty()){			dto.setStatus(ResultEnum.EMPTY_RESULT.getCode());			dto.setMsg(ResultEnum.EMPTY_RESULT.getMsg());			log.error(ResultEnum.EMPTY_RESULT.toString());			return dto;		}		dto.setStatus(ResultEnum.SUCCESS.getCode());		dto.setMsg(ResultEnum.SUCCESS.getMsg());		dto.setData(statementVOList);		dto.setCount(recordMapper.getRecordCount(queryRecordDTO));		log.info(ResultEnum.SUCCESS.toString());		return dto;	}	@Override	public void exportRecord(QueryRecordDTO queryRecordDTO, HttpServletResponse response) throws IOException {		List<RecordEntityVo> statementVOList=null;		List<StatementCountVO> recordCount = null;		StringBuffer stringBuffer = new StringBuffer();		String excelTitle = null;		switch (queryRecordDTO.getType()){			case "0" :				log.info("获得消费记录信息_start");				statementVOList = recordMapper.getAllPayRecordVoInfo(queryRecordDTO);				 recordCount = recordMapper.getRecordCount(queryRecordDTO);				excelTitle="消费明细";				break;			case "1" :				log.info("获得充值记录信息_start");				statementVOList = recordMapper.getAllLoadRecordVoInfo(queryRecordDTO);				recordCount = recordMapper.getRecordCount(queryRecordDTO);				excelTitle="充值明细";				break;			case "2":				log.info("获得退费记录信息_start");				statementVOList = recordMapper.getAllRefundRecordVoInfo(queryRecordDTO);				recordCount = recordMapper.getRecordCount(queryRecordDTO);				excelTitle="退费明细";				break;			default:				log.info("获得所有交易记录信息_start");				statementVOList = recordMapper.getAllRecordVoInfo(queryRecordDTO);				recordCount = recordMapper.getRecordCount(queryRecordDTO);				excelTitle="综合明细";				break;		}		if(recordCount.size()>0){			for (StatementCountVO vo:recordCount) {				stringBuffer.append("交易类型:").append(vo.getTypt()).append(" , ")						.append("交易笔数：").append(vo.getTransCountNum()).append(" , ")						.append("交易金额：").append(vo.getTransCountMoney()).append("元 ");			}		}else {			stringBuffer.append("无交易记录");		}		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		statementVOList.stream().forEach(recordEntityVo -> {			try {				String time = format.format(format.parse(recordEntityVo.getRecordTime()));				recordEntityVo.setRecordTime(time);			} catch (ParseException e) {				e.printStackTrace();			}		});		//设置头		ModelMap modelMap = new ModelMap();		List<ExcelExportEntity> entityList = new ArrayList<>();		setExportRecordEntityList(entityList);		//设置excel数据		List<Map<String, Object>> dataList = new ArrayList<>();		for (RecordEntityVo vo : statementVOList) {			addRecordMapToList(dataList, vo);		}		//设置导出参数		ExportParams params = new ExportParams(excelTitle, "交易流水表", ExcelType.XSSF);		modelMap.put(MapExcelConstants.MAP_LIST, dataList);		modelMap.put(MapExcelConstants.ENTITY_LIST, entityList);		modelMap.put(MapExcelConstants.PARAMS, params);		modelMap.put(MapExcelConstants.FILE_NAME, "" + System.currentTimeMillis());		Workbook book = createLocalExcel(modelMap);		Sheet sheet = book.getSheet("交易流水表");		Row row = sheet.createRow(statementVOList.size() + 1);//获取最后一行		row.createCell(0).setCellValue(stringBuffer.toString());		// 告诉浏览器用什么软件可以打开此文件		response.setHeader("content-Type", "application/vnd.ms-excel");		// 下载文件的默认名称		response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode("流水","UTF-8") + ".xlsx");		//编码		response.setCharacterEncoding("UTF-8");		book.write(response.getOutputStream());	}	/**	 * 设置导出流水excel的EntityList，EntityList是excel表头	 *	 * @param entityList 需要更新的EntityList	 * @author shenwei	 */	private void setExportRecordEntityList(List<ExcelExportEntity> entityList) {		//设置基础属性		for (RecordEntityTempleEnum recordEntityTempleEnum : EnumSet.allOf(RecordEntityTempleEnum.class)) {			//当为excel属性时，添加到entityList中			if (recordEntityTempleEnum.getExcelProperty()) {				entityList.add(new ExcelExportEntity(recordEntityTempleEnum.getChineseName(), recordEntityTempleEnum.getChineseName()));			}		}	}	/**	 * 设置每个流水的属性值	 *	 * @param dataList	 *	 *	 *	 * @author shenwei	 */	private void addRecordMapToList(List<Map<String, Object>> dataList, RecordEntityVo vo) {		//用户属性的值，以属性中文名为key，属性的值为value		Map<String, Object> data = new HashMap<>();		String propertyValue;		for (RecordEntityTempleEnum recordEntityTempleEnum : EnumSet.allOf(RecordEntityTempleEnum.class)) {			propertyValue = String.valueOf(ReflectionUtil.invokeGetter(vo, recordEntityTempleEnum.getFunctionName()));			data.put(recordEntityTempleEnum.getChineseName(), propertyValue);		}		dataList.add(data);	}	/**	 * 根据ModelMap生成excel文件	 *	 * @param modelMap	 * @throws IOException	 * @author shenwei	 */	public Workbook createLocalExcel(ModelMap modelMap) throws IOException {		//文件名称//		StringBuilder fileName = new StringBuilder();			//excel workbook对象			Workbook workbook = ExcelExportUtil.exportExcel(					(ExportParams) modelMap.get(Constants.EASY_POI_MODEL_MAP_PARAMS),					(List) modelMap.get(Constants.EASY_POI_MODEL_MAP_ENTITY_LIST),					(Collection) modelMap.get(Constants.EASY_POI_MODEL_MAP_MAP_LIST));			return workbook;	}}